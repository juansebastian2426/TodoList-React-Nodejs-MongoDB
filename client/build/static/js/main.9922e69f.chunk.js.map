{"version":3,"sources":["components/Header/index.js","components/Alert/index.js","components/FormAddTodo/index.js","components/ListTodo/index.js","pages/Home/index.js","components/FormEditTodo/index.js","pages/Todo-Edit/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","Alert","msg","type","FormAddTodo","setGetTodosRequest","initialData","title","description","useState","data","setData","sendDataSuccess","setSendDataSuccess","onSubmit","e","preventDefault","axios","post","then","res","success","setTimeout","placeholder","value","onChange","element","target","ListTodo","todos","DeleteTodo","map","todo","key","_id","onClick","to","Home","setTodos","getTodosRequest","useEffect","a","get","getTodos","id","delete","FormEditTodo","idTodo","useParams","history","useHistory","put","push","App","exact","path","component","TodoEdit","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9922e69f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './style.css'\r\n\r\nconst Header = () => {\r\n    return(\r\n        <header>\r\n            <nav className='navbar navbar-expand bg-dark'>\r\n                <div className='container'>\r\n                    <a className='navbar-brand text-white' href='/'>TodoList</a>\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    )\r\n}   \r\n\r\nexport default Header;","import React from 'react';\r\n\r\n\r\nconst Alert = ({msg, type}) => {\r\n    return (\r\n        <div className={`alert alert-${type}`}>\r\n            {msg}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Alert;","import React, {useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Alert from '../Alert';\r\n\r\n\r\nconst FormAddTodo = ({setGetTodosRequest}) => {\r\n\r\n    const initialData = {\r\n        title: '',\r\n        description: ''\r\n    }\r\n\r\n    const [data, setData] = useState(initialData);\r\n    const [sendDataSuccess, setSendDataSuccess] = useState(false);\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        axios.post('http://127.0.0.1:4001/api/todo-save', data)\r\n            .then((res) => {\r\n                if(res.data.success){\r\n                    setSendDataSuccess(true)\r\n                    setTimeout(() => setSendDataSuccess(false), 2000)\r\n                    setGetTodosRequest(true)\r\n                    setData(initialData)\r\n                }\r\n            });\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h1>Add Todo</h1>\r\n            <div className='form-group'>\r\n                <input \r\n                    type='text' \r\n                    placeholder='todo name' \r\n                    className='form-control'\r\n                    value={data.title}\r\n                    onChange={(element) => setData({...data, title: element.target.value})}\r\n                />\r\n            </div>\r\n            <div className='form-group'>\r\n                <textarea\r\n                    placeholder='todo description'\r\n                    className='form-control'\r\n                    value={data.description}\r\n                    onChange={(element) => setData({...data, description: element.target.value})}\r\n                ></textarea>\r\n            </div>\r\n            <div className='form-group'>\r\n                <button \r\n                    type='submit' \r\n                    className='btn btn-dark btn-block'\r\n                >Send Todo</button>\r\n            </div>\r\n            {sendDataSuccess && <Alert msg='Todo Saved' type='success' />}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default FormAddTodo;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ListTodo = ({todos, DeleteTodo}) => {\r\n\r\n    return(\r\n        <div>\r\n            <ul className='list-group'>\r\n            {\r\n                todos.map(todo => (\r\n                    <li key={todo._id} className='list-group-item'>\r\n                        <h3>{todo.title}</h3>\r\n                        <span>\r\n                            {todo.description}\r\n                        </span>\r\n                        <div className='btn btn-danger btn-block' onClick={() => DeleteTodo(todo._id)}>Delete</div>\r\n                        <Link \r\n                            className='btn btn-info btn-block'\r\n                            to={`/todo-edit/${todo._id}`} \r\n                        >Edit</Link>\r\n\r\n                    </li>\r\n                ))\r\n            }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListTodo;","import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nimport FormAddTodo from '../../components/FormAddTodo'\r\nimport ListTodo from '../../components/ListTodo'\r\n\r\nconst Home = () => {\r\n\r\n    const [todos, setTodos] = useState([]);\r\n    const [getTodosRequest, setGetTodosRequest] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const getTodos = async () => {\r\n            const res = await axios.get('http://127.0.0.1:4001/api/todo');\r\n            setTodos(res.data);\r\n            setGetTodosRequest(false)\r\n        }\r\n        getTodos();\r\n    }, [getTodosRequest])\r\n\r\n    const DeleteTodo = async id => {\r\n        await axios.delete('http://127.0.0.1:4001/api/todo-remove', { data: { id }});\r\n        setGetTodosRequest(true)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className='container mt-3'>\r\n                <div className='row'>\r\n                    <div className='col-lg'>\r\n                        <FormAddTodo \r\n                            setGetTodosRequest={setGetTodosRequest}\r\n                        />\r\n                    </div>\r\n                    <div className='col-lg'>\r\n                        <ListTodo \r\n                            todos={todos}\r\n                            DeleteTodo= {DeleteTodo}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React, {useState} from 'react';\r\nimport {useParams, useHistory} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n\r\nconst FormEditTodo = () => {\r\n\r\n    const {id: idTodo} = useParams();\r\n    const history = useHistory();\r\n\r\n    const initialData = {\r\n        id: idTodo,\r\n        title: '',\r\n        description: ''\r\n    }\r\n    \r\n    const [data, setData] = useState(initialData);\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        axios.put(`http://127.0.0.1:4001/api/todo-edit`, data)\r\n            .then((res) => {\r\n                if(res.data.success){\r\n                    history.push('/')\r\n                }\r\n            });\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h1>Edit Todo</h1>\r\n            <div className='form-group'>\r\n                <input \r\n                    type='text' \r\n                    placeholder='todo name' \r\n                    className='form-control'\r\n                    value={data.title}\r\n                    onChange={(element) => setData({...data, title: element.target.value})}\r\n                />\r\n            </div>\r\n            <div className='form-group'>\r\n                <textarea\r\n                    placeholder='todo description'\r\n                    className='form-control'\r\n                    value={data.description}\r\n                    onChange={(element) => setData({...data, description: element.target.value})}\r\n                ></textarea>\r\n            </div>\r\n            <div className='form-group'>\r\n                <button \r\n                    type='submit' \r\n                    className='btn btn-dark btn-block'\r\n                >Edit Todo</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default FormEditTodo;","import React from 'react';\r\n\r\nimport FormEditTodo from '../../components/FormEditTodo'\r\n\r\nexport default () => {\r\n    return(\r\n        <div className='container mt-4'>\r\n            <FormEditTodo />\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\n\nimport Header from './components/Header';\n\n// pages\nimport Home from './pages/Home'\nimport TodoEdit from './pages/Todo-Edit'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Header />\n      <Switch>\n        <Route exact path='/' component={Home}/>\n        <Route exact path='/todo-edit/:id' component={TodoEdit}/>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}